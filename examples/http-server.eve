start path resolution
```
  match
     r = [#http-request]
     split[text:r.request.url token index, by:"/"]
     fr = [#root]
  bind
     [#path index:1 file:fr]
     [#path index token]
     [#content-type suffix:"jpeg" type:"application/jpeg"]
     [#content-type suffix:"css" type:"text/css"]
     [#content-type suffix:"html" type:"text/html"]
```

resolve a path
```
match
    [#path index:pindex file:pfile]
    f = pfile.child
    child = [#path index:(pindex + 1) token:f.name]
bind
    child.file := f
```

path search complete
```
match
     [#path index token]
     final = [#path index: count[given :index] file]
     split[text:final.token by:"." token:extoken index:exindex]
     exindex = 2
bind
     [#request-object extension:extoken file]
```

complete! send content response
```
  match
     r = [#http-request]
     [#request-object extension file]
     ct = [#content-type suffix:token]
  bind
     r.response := [
       body: file.body
       status:"200"
       reason:"OK"
       header:[Content-Type:ct.type]]
```


initiate eve program
```
  match
     r = [#http-request]
     [#request-object extension:"eve" file]
     [#root child:[name:"jssrc" child:[name:"renderer.js" contents]]]
  bind
     r.response := [content: contents
       status:"200"
       reason:"OK"
       header:[Content-Type:"application/json"]]
```


start eve program
```
  match
     r = [#http-request header:[zikky]]
     [#request-object extension:"eve" file]
  bind
     // ok, here we need to
        // build an environment for the new process
        // start the new process
       // upgrade the socket to the websocket
     r.response := [body: file.body
       status:"200"
       reason:"OK"
       header:[Content-Type:ct.type]]
```

no such file!
```
   match
      r = [#http-request]
      not(r.response)
   bind
      r.response :=
       [status:"404"
        reason:"No such object"
        body: ""]
```
